srv_check = False


[virtual_function]

    # _ZN11CBasePlayer10BumpWeaponEP17CBaseCombatWeapon
    [[bump_weapon]]
        offset_linux = 454
        offset_windows = 453
        arguments = POINTER
        return_type = BOOL

    # _ZN11CBasePlayer11Weapon_DropEP17CBaseCombatWeaponPK6VectorS4_
    [[drop_weapon]]
        offset_linux = 289
        offset_windows = 288
        arguments = POINTER, POINTER, POINTER

    # _ZN11CBasePlayer13GiveNamedItemEPKciP13CEconItemViewb
    [[give_named_item]]
        offset_linux = 459
        offset_windows = 458
        arguments = STRING, INT, POINTER, BOOL, POINTER
        return_type = POINTER

    # _ZN11CBasePlayer21IncrementAssistsCountEi
    [[increment_assists_count]]
        offset_linux = 501
        offset_windows = 500
        arguments = INT

    # _ZN11CBasePlayer19IncrementDeathCountEi
    [[increment_death_count]]
        offset_linux = 502
        offset_windows = 501
        arguments = INT

    # _ZN11CBasePlayer18IncrementFragCountEii
    [[increment_frag_count]]
        offset_linux = 500
        offset_windows = 499
        arguments = INT, INT

    # _ZN11CBasePlayer16PlayerRunCommandEP8CUserCmdP11IMoveHelper
    [[run_command]]
        offset_linux = 479
        offset_windows = 478
        arguments = POINTER, POINTER

    # _ZN11CBasePlayer8PreThinkEv
    [[pre_think]]
        offset_linux = 373
        offset_windows = 372

    # _ZN11CBasePlayer9PostThinkEv
    [[post_think]]
        offset_linux = 374
        offset_windows = 373


[based_attribute]

    # from memory import alloc
    # from players.entity import Player

    # player = Player(1)
    # ptr = alloc(player.factory.size)
    # player.pointer.copy(ptr, ptr.size)
    # player.increment_assists_count(1)
    # for offset in range(int(ptr.size / 4)):
        # offset = offset * 4
        # if ptr.get_int(offset) != player.pointer.get_int(offset):
            # break
    # print('Offset of Player.assists is:', offset)
    [[assists]]
        base = m_iFrags
        offset = 4
        type = INT


[property]

    [[view_offset]]
        name = localdata.m_vecViewOffset[0]
        type = Vector
